``` swift

enum LinkedList<element: Comparable> {
    case empty
    indirect case node(value: element, next: LinkedList<element>)
    
    mutating func addValue(_ newValue: element) {
        self = self.addValueU(newValue)
    }
    
    func addValueU(_ newValue: element) ->LinkedList<element>{
        switch self {
        case .empty:
            return .node(value: newValue, next: .empty)
        case let .node(value, next):
            return .node(value: value, next: next.addValueU(newValue))
        }
    }
}

extension LinkedList: CustomStringConvertible{
    var description: String {
        switch self {
        case .empty:
            return ""
        case let .node(value, next):
            print(value, terminator:" ")
             let _ = next.description
            return ""
        }
    }
}

```
